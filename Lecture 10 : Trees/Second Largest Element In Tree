##Second Largest Element In Tree...

Question...)

Given a generic tree, find and return the node with second largest value in given tree.
Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40


Solution...)




public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
     public static TreeNode<Integer>  findNextLargerNode(TreeNode<Integer> root,int n){
        TreeNode<Integer> minDifferenceNode;
        if(root.data < n) {
            minDifferenceNode = root;
        }
        else {
            minDifferenceNode = null;
        }
         
        for(TreeNode<Integer> child : root.children) {
            TreeNode<Integer> childMinDiffNode = findNextLargerNode(child, n);
            if(minDifferenceNode == null) {
                minDifferenceNode = childMinDiffNode;
            }
            else {
                if(childMinDiffNode != null && (childMinDiffNode.data > minDifferenceNode.data)) {
                    minDifferenceNode = childMinDiffNode;
                }
            }
        }
        return minDifferenceNode;
    }
	public static TreeNode<Integer> maxDataNode(TreeNode<Integer> root){ 
		
 TreeNode<Integer>max=root;
		for(TreeNode<Integer> child: root.children) {
   TreeNode<Integer>temp=maxDataNode(child);
            if(temp.data>max.data)
           max=temp;
                   }
		return max;
    }
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){

     TreeNode<Integer> root1   = maxDataNode(root);
		 int x=root1.data;
        
      TreeNode<Integer> root2   = findNextLargerNode(root,x);
        return root2;
	}
	
}
	
	


