##Nodes Greater Than X..

For a given a binary tree of integers and an integer X, find and return the total number of nodes of the given binary tree which are having data greater than X.
Input Format:
The first line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

The second line of input contains an integer, denoting the value of X.
Note:
You are not required to print anything explicitly. It has already been taken care of.
Output Format:
The only line of output prints the total number of nodes where the node data is greater than X.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
1 4 2 3 -1 -1 -1
2
Sample Output 1:
2
Explanation for Sample Input 1:
Out of the four nodes of the given binary tree, [3, 4] are the node data that are greater than X = 2.
Sample Input 2:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
5
Sample Output 2:
3


Solution...)



11
public class Solution {
12
​
13
    public static int countNodesGreaterThanX(BinaryTreeNode<Integer> root, int x) {
14
        if (root == null) {
15
            return 0;
16
        }
17
​
18
        int count = (root.data > x) ? 1 : 0;
19
​
20
        if (root.left != null) {
21
            count += countNodesGreaterThanX(root.left, x);
22
        }
23
        if (root.right != null) {
24
            count += countNodesGreaterThanX(root.right, x);
25
        }
        
Java (SE 1.8)
C++ (g++ 5.4)
Python (3.5)
1
/*
2
​
3
    Time complexity: O(N)
4
    Space complexity: O(H)
5
​
6
    where N is the number of nodes in the input tree
7
    and H is the height of the input tree
8
​
9
 */
10
​
11
public class Solution {
12
​
13
    public static int countNodesGreaterThanX(BinaryTreeNode<Integer> root, int x) {
14
        if (root == null) {
15
            return 0;
16
        }
17
​
18
        int count = (root.data > x) ? 1 : 0;
19
​
20
        if (root.left != null) {
21
            count += countNodesGreaterThanX(root.left, x);
22
        }
23
        if (root.right != null) {
24
            count += countNodesGreaterThanX(root.right, x);
25
        }
26
​
