##Palindrome Pair

Question..)


Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.
Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.
Constraints:
Time Limit: 1 sec
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true
Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome
Sample Input 2 :
2
abc def
Sample Output 2 :
false
Explanation of Sample Input 2:
Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'


Solution.1.)


import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if(word.length() == 0 || word.length() == 1) {
			return true;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}





	/*..................... Palindrome Pair................... */


	public boolean isPalindromePair(ArrayList<String> words) {
		for(int i = 0; i < words.size(); i++) {
            
            String temp = words.get(i);
            
            StringBuilder input1 = new StringBuilder();
            input1.append(temp);
            String input2 = input1.reverse().toString();
            add(temp);
            
            if(search(root, input2)) {
                return true;
            }
            
            
        }
        return false;
	}


	
} 



Solution..2.)



import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if(word.length() == 0) {
			return root.isTerminating;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}





	/*..................... Palindrome Pair................... */


	public boolean isPalindromePair(ArrayList<String> words)
    {
        for(String word : words) 
        {
            this.add(reverseWord(word));
        } 
        return isPalindromePair(this.root, words);
    }
    private static String reverseWord(String word)
    {
        String reverse = ""; 
        for(int i = word.length() - 1; i >= 0; i--) 
        {
            reverse += word.charAt(i);
        }
        return reverse;
    }
    private boolean isPalindromePair(TrieNode root, ArrayList<String> words)
    {
        if (words == null || words.size() == 0)
        {
            return false; 
        }
        for (String word : words)
        {
            if (doesPairExistFor(root, word, 0))
            {
                return true;
            }
        }
        return false;
    }
    private boolean doesPairExistFor(TrieNode root, String word, int startIndex)
    {
        if (word == "") 
        {
            return true;
        }
        if (startIndex == word.length())
        {
            if (root.isTerminating)
            {
                return true;
            }
            return checkRemainingBranchesInTrie(root, "");
        }
        int charIndex = word.charAt(startIndex) - 'a'; 
        TrieNode correspondingChild = root.children[charIndex];
        if(correspondingChild == null) 
        {
            if (root.isTerminating)
            {
                return checkWordForPalindrome(word.substring(startIndex)); 
            }
            return false; 
        }
        return doesPairExistFor(correspondingChild, word, (startIndex + 1));
    }
    private boolean checkRemainingBranchesInTrie(TrieNode root, String word) 
    {
        if (root.isTerminating)
        {
            if (checkWordForPalindrome(word)) 
            {
                return true;
            }
        }
        for (TrieNode childNode : root.children) 
        {
            if (childNode == null)
            {
                continue;
            }
            String fwd = word + childNode.data; 
            if (checkRemainingBranchesInTrie(childNode, fwd)) 
            {
                return true;
            }
        } 
        return false;
    }
    private static boolean checkWordForPalindrome(String word)
    {
        int startIndex = 0;
        int endIndex = word.length() - 1; 
        while (startIndex < endIndex)
        {
            if (word.charAt(startIndex) != word.charAt(endIndex)) 
            {
                return false;
            }
            startIndex += 1;
            endIndex -= 1; 
        }
        return true;
    }

	
} 
