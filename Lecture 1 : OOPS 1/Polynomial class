##Polynomial class...
Implement a polynomial class, that contains following functions -
1. setCoefficient -
This function sets coefficient for a particular degree value. If term with given degree is not there in the polynomial, then corresponding term (with specified degree and value) is added. If the term is already present in the polynomial, then previous coefficient value is replaced by given coefficient value.
2. add -
Adds two polynomials and returns a new polynomial which has the result.
3. subtract -
Subtracts two polynomials and returns a new polynomial which has the result.
4. multiply -
Multiplies two polynomials and returns a new polynomial which has the result.
5. print -
Prints all the terms (only terms with non zero coefficients are to be printed) in increasing order of degree.
Print pattern for a single term : "x"
And multiple terms should be printed separated by space. For more clarity, refer sample test cases.
Note : Only keep those terms which have non - zero coefficients.


Sample Input 1 :
P1 : 1x2 2x3 4x6 
P2 : 3x4 1x2
Sample Output 1 :
P1 + P2 = 2x2 2x3 3x4 4x6
Sample Input 2 :
P1 : 1x2 2x3 4x6 
P2 : 3x4 1x2
Sample Output 2 :
P1 - P2 = 2x3 -3x4 4x6



MAIN CODE..
import java.util.Scanner;


public class Main {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}

}




sOLUTION....)



/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */

public class Polynomial 
{
    private int data[];
	private int nextindex;
	
    public Polynomial()
    {
        data=new int[5];
    }
	
	
   
	public void setCoefficient(int degree, int coeff)
    {
          if(degree <= nextindex) 
            {
				data[degree]=coeff;
			}
			else
			{
				add(degree,coeff);
			}
	}
    
     public void add(int degree,int coeff) 
	{
		//while(nextindex == data.length) 
		while(degree >= data.length)
		{
			restructure();
		}
         //here we save cofficient in the degree index
		data[degree]=coeff;
         //here we incicriment nextindex with degree 
         //we do this to update the size of array in nextIndex variable
		nextindex=degree;
		//nextindex++;
	}
	public int getCoeff(int index) 
	{
        //we use to check wheather the element is present or not
		if(index<=nextindex) {
			return data[index];
		}
		else
			return 0;
	}
	private void restructure() 
	{
        //this copy the element of data in temp[] arr 
		int temp[]=data;
        //here data is double by two times of its size
		data=new int[data.length*2];
        //all the elements stored in temp are copied back to data
		for(int i=0;i<temp.length;i++) 
		{
			data[i]=temp[i];
		}
	}
    public int size() {
        //this returns the size of array
		return nextindex;
	}
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print()
    {
        int size=size();
		for(int i=0;i<=size;i++) 
        {
			if(getCoeff(i)!=0) 
            {
                //by this we print the coffient stored in ith index and as i mentioned above
                //we store the cofficient at ith index so ith index will be degree
                //by this format we print cofficient with x and power(degree) along with coff.
				System.out.print(getCoeff(i)+"x"+i+" ");
			}
		}
		System.out.println();
        
	}

	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p)
    {
       Polynomial p1=new Polynomial();
        int size=Math.max(size(),p.size());
		for(int i=0;i<=size;i++) 
		{
			if(this.getCoeff(i)!=0 || p.getCoeff(i)!=0) {
                //TO-DO
				int coeff=this.getCoeff(i)+p.getCoeff(i);
				p1.setCoefficient(i, coeff);
			}
		}
        return p1;
        
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p)
    {
        Polynomial p1=new Polynomial();
        int size=Math.max(size(),p.size());
		for(int i=0;i<=size;i++) 
		{
			if(this.getCoeff(i)!=0 || p.getCoeff(i)!=0) {
				int coeff=this.getCoeff(i)-p.getCoeff(i);
				p1.setCoefficient(i, coeff);
			}
		}
        return p1;
	}
	
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p)
    {
		Polynomial temp=new Polynomial();
		int p1size=this.size();
		int p2size=p.size();
		for(int i=0;i<=p1size;i++) 
		{
			for(int j=0;j<=p2size;j++) 
			{
				int coeff=this.getCoeff(i)*p.getCoeff(j);
				int degree=i+j;
				coeff=coeff+temp.getCoeff(degree);
				temp.setCoefficient(degree, coeff);
			}
		}
        return temp;
	}

}
