##Merge Sort Code....

Question...)

Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 





Solution...)

public class solution {

	public static void mergeSort(int[] input){
		
        
        if(input.length <= 1) {
            return;
        }
        
        int mid = input.length / 2;
        int firstpart[] = new int[mid];
        int secondpart[] = new int[input.length - mid];
        
        for(int i = 0; i < mid; i++) {
            
            firstpart[i] = input[i];
            
            
        }
        int k = 0;
        for(int i = mid; i < input.length; i++) {
            secondpart[k] = input[i];
            k++;
        }
        
        mergeSort(firstpart);
        mergeSort(secondpart);
        merge(input, firstpart, secondpart);
        
		
	}
    
    public static void merge(int output[] , int part1[] , int part2[]) {
        
        int i = 0;
        int j = 0;
        int k = 0;
        
        while(i < part1.length && j < part2.length) {
            if(part1[i] < part2[j]) {
                output[k] = part1[i];
                i++;
                k++;
            }
            else {
                output[k] = part2[j];
                j++;
                k++;
            }
        }
        
        while(i < part1.length) {
            
            output[k] = part1[i];
                i++;
                k++;
            
        }
        
        while(j < part2.length) {
             output[k] = part2[j];
                j++;
                k++;
            
            
        }
        
        
    }
}








Solution....2...)



public class solution {
    
    
    
   public static  void merge(int arr[], int start, int mid, int end) 
    { 
        // Find sizes of two subarrays to be merged 
        int n1 = mid - start + 1; 
        int n2 = end - mid; 
  
        /* Create temp arrays */
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i) 
            L[i] = arr[start + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[mid + 1+ j]; 
  
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = start; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
  
    // Main function that sorts arr[l..r] using 
    // merge() 
  public static   void sort(int arr[], int start, int end) 
    { 
        if (start < end) 
        { 
            // Find the middle point 
            int mid = (start+end)/2; 
  
            // Sort first and second halves 
            sort(arr, start, mid); 
            sort(arr , mid+1, end); 
  
            // Merge the sorted halves 
            merge(arr, start, mid, end); 
        } 
    } 
  
    
//     public static void mergesort(int[] input,int start,int end)
//     {
//         if(start>=end)
//         {return;}
        
//         int mid=(start+end)/2;
//         mergesort(input,start,mid);
        
//         mergesort(input,mid+1,end);
//         merge(input,start,mid,end);
        
//     }
    
    

	public static void mergeSort(int[] input){
		// Write your code here
       
		int p1=input.length-1;
        sort(input,0,p1);
        
        
	}
}
