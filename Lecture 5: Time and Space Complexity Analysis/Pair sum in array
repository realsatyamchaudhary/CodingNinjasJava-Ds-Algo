#Pair sum in array....)

Question...)

Given a random integer array A and a number x. Find and print the pair of elements in the array which sum to x.
Array A can contain duplicate elements.
While printing a pair, print the smaller element first.
That is, if a valid pair is (6, 5) print "5 6". There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.
Input format :
Line 1 : Integer N (Array size)
Line 2 : Array elements (separated by space)
Line 3 : Integer x
Output format :
Line 1 : Pair 1 elements (separated by space)
Line 2 : Pair 2 elements (separated by space)
Line 3 : and so on
Constraints :
1 <= N <= 1000
1 <= x <= 100
Sample Input:
9
1 3 6 2 5 4 3 2 4
7
Sample Output :
1 6
3 4
3 4
2 5
2 5
3 4
3 4







Solution.....)



public class PairSum{	

	public static void pairSum(int[] input, int x){
		/* Your class should be named PairSum
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Print output and don't return it.
	 	 * Taking input is handled automatically.
		 */
        
         for(int i=0;i<input.length;i++)
                {   
         
                  for(int j=i+1;j<input.length;j++)
                    {

                      if(x==(input[i]+input[j]))
                      {
                          if(input[i]<input[j]){
                          System.out.println(input[i]+" "+input[j]);
                          }else
                          {
                          System.out.println(input[j]+" "+input[i]);
                          }
                       
                      }
                    }

                }
        
        

	}
}
 
 
 
 
 Solution 2...)
 
 
 /* 
2
    Time Complexity : O(n * log(n))
3
    Space Complexity : O(1)
4
​
5
    A more optimized solution to this problem is possible
6
        using HashMaps. Which will take:
7
        Time Complexity: O(n)
8
        Space Complexity : O(n)
9
    Where 'n' is the size of the Array/List
10
*/
11
​
12
import java.util.Arrays;
13
​
14
public class Solution { 
15
​
16
    public static int pairSum(int[] arr, int num) {
17
        Arrays.sort(arr);
18
​
19
        int startIndex = 0;
20
        int endIndex = (arr.length - 1);
	  int numPair = 0;
23
​
24
        while(startIndex < endIndex) {
25
​
26
            if(arr[startIndex] + arr[endIndex] < num) {
27
                startIndex++;
28
            }
29
            else if (arr[startIndex] + arr[endIndex] > num) {
30
                endIndex--;
31
            } else {
32
                
33
                int elementAtStart = arr[startIndex];
34
                int elementAtEnd = arr[endIndex];
35
                
36
                if (elementAtStart == elementAtEnd) {
		 int totalElementsFromStartToEnd = (endIndex - startIndex) + 1;
38
                    numPair += (totalElementsFromStartToEnd * (totalElementsFromStartToEnd - 1) / 2);
39
                    
40
                    return numPair;
41
                }
42
                
43
                int tempStartIndex = startIndex + 1;
44
                int tempEndIndex = endIndex - 1;
45
​
46
                while (tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart) {
47
                    tempStartIndex += 1;
48
                }
49
                
50
                while(tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd) {
51
                    tempEndIndex -= 1;
52
                }
		
54
                int totalElementsFromStart = (tempStartIndex - startIndex);
55
                int totalElementsFromEnd = (endIndex - tempEndIndex);
56
                
57
                numPair += (totalElementsFromStart * totalElementsFromEnd);
58
​
59
​
60
                startIndex = tempStartIndex;
61
                endIndex = tempEndIndex;
62
​
63
            }
64
        }
65
​
66
        return numPair;
67
    }
68
}

