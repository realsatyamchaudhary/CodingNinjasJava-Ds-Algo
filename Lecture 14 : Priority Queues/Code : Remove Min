##Code : Remove Min..

Question..)


Implement the function RemoveMin for the min priority queue class.
For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.
Note : main function is given for your reference which we are using internally to test the code.


Solution...)



import java.util.ArrayList;


public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}
	

	int removeMin()throws PriorityQueueException {
		if(isEmpty()) {
            PriorityQueueException e = new PriorityQueueException();
            throw e;
        }
        
        int minValue = heap.get(0);
        heap.set(0, heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        
        int index = 0;
        int minIndex = index;
        int leftChildren = 2 * index + 1;
        int rightChildren = 2 * index + 2;
        
        while(leftChildren < heap.size()) {
            if(heap.get(leftChildren) < heap.get(minIndex)) {
                minIndex = leftChildren;
            }
            if(rightChildren < heap.size()&&heap.get(rightChildren) < heap.get(minIndex)) {
                minIndex = rightChildren;
            }
            if(minIndex == index) {
                break;
            }
            else {
                int temp1 = heap.get(minIndex);
                heap.set(minIndex, heap.get(index));
                heap.set(index, temp1);
                  index = minIndex;
                leftChildren = 2 * index + 1;
                rightChildren = 2 * index + 2;  
            }  
        }
        
        return minValue;
        
	}
}

class PriorityQueueException extends Exception {

}
