##Code : In-place heap sort...

Question..)

Given an integer array of size N. Sort this array (in decreasing order) using heap sort.
Note: Space complexity should be O(1).
Input Format:
The first line of input contains an integer, that denotes the value of the size of the array or N.
The following line contains N space separated integers, that denote the value of the elements of the array.
Output Format :
The first and only line of output contains array elements after sorting. The elements of the array in the output are separated by single space.
Constraints :
1 <= n <= 10^6
Time Limit: 1 sec
Sample Input 1:
6 
2 6 8 5 4 3
Sample Output 1:
8 6 5 4 3 2



Solution...)



// public class Solution {


//      private static void insertIntoHeap(int arr[], int i) {
//             int childIndex = i;
//             int parentIndex = (childIndex-1) / 2;
//             while(childIndex > 0) {
//                 if(arr[childIndex] < arr[parentIndex]) {
//                     int temp = arr[parentIndex];
//                     arr[childIndex] = arr[parentIndex];
//                     arr[parentIndex] = temp;
//                     childIndex = parentIndex;
//                     parentIndex = (childIndex-1)/2;
//                 }else {
//                     return;
//                 }
//             }
//         }
//     private static void removeIntoHeap(int arr[], int heapSize) {
//         int temp = arr[0];
//         arr[0] = arr[heapSize-1];
//         heapSize--;
//         int index = 0;
//         int parent = index;
//         int leftChildIndex = 2 * index + 1;
//         int rightChildIndex = 2 * index + 2;
        
//         while(leftChildIndex < heapSize) {
//             if(arr[leftChildIndex] < arr[parent]) {
//                 parent = leftChildIndex;
//             }
//             if(rightChildIndex < heapSize && arr[rightChildIndex] < arr[parent]) {
//                 parent = rightChildIndex;
//             }
//             if(parent == index) {
//                 break;
//             }
//             else {
//                 int temp1 = arr[0];
//                 arr[index] = arr[parent];
//                 arr[parent] = temp1;
//                 index = parent;
//                 leftChildIndex = 2 * index + 1;
//                 rightChildIndex = 2 * index + 2;
//             }
//         }
//        // return temp;
//     }
//     	public static void inplaceHeapSort(int arr[]) {
// 		for(int i = 0; i < arr.length; i++) {
//             insertIntoHeap(arr,i);
//         }
//         for(int i = arr.length-1 ;i>=0; i--) {
//           // arr[arr.length - 1 - i]=
//                removeIntoHeap(arr, i);
            
//         }
        
       
		
// 	}
        



public class Solution {

	public static void inplaceHeapSort(int a[]) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Change in the given input itself.
		* Taking input and printing output is handled automatically.
		*/
		for(int i = 1; i < a.length; i++)
        {
            int childIndex = i; 
            int parentIndex = (childIndex - 1) / 2; 
            while(childIndex > 0) {
                if(a[childIndex] > a[parentIndex]) {
                    break; 
                }
                int temp = a[childIndex];
                a[childIndex] = a[parentIndex];
                a[parentIndex] = temp; 
                childIndex = parentIndex;
                parentIndex = (childIndex - 1) / 2; 
            }
        }
        for(int i = a.length-1; i >=0; i--) {
            int min = a[0];
            a[0] = a[i]; 
            a[i] = min;
            int parentIndex = 0; 
            int leftChildIndex = 2*parentIndex + 1; 
            int rightChildIndex = leftChildIndex + 1;
            while(parentIndex < i) {
                int minIndex = parentIndex;
                int minValue = a[minIndex]; 
                if(leftChildIndex < i) { 
                    int leftChild = a[leftChildIndex];
                    if(leftChild < minValue) { 
                        minIndex = leftChildIndex;
                        minValue = a[minIndex]; 
                    }
                }
                if(rightChildIndex < i) {
                    int rightChild = a[rightChildIndex]; 
                    if(rightChild < minValue) { 
                        minIndex = rightChildIndex; 
                        minValue = a[minIndex]; 
                    }
                }
                if(parentIndex == minIndex) {
                    break; 
                }
                else { 
                    a[minIndex] = a[parentIndex]; 
                    a[parentIndex] = minValue;
                }
                parentIndex = minIndex;
                leftChildIndex = 2*parentIndex + 1;
                rightChildIndex = leftChildIndex + 1;
            }
        }
	}
}
// }
