##Code : Max Priority Queue..

Question...)

Implement the class for Max Priority Queue which includes following functions -
1. getSize -
Return the size of priority queue i.e. number of elements present in the priority queue.
2. isEmpty -
Check if priority queue is empty or not. Return true or false accordingly.
3. insert -
Given an element, insert that element in the priority queue at the correct position.
4. getMax -
Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
5. removeMax -
Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
Note : main function is given for your reference which we are using internally to test the class.



Solution...)

import java.util.*;
public class PQ {
	
    private ArrayList<Integer> heap;
    
    public PQ() {
        heap = new ArrayList<Integer>();
    }
    
    
    
	boolean isEmpty() {
		return heap.size() == 0;
	}

	int getSize() {
		return heap.size();
	}

	int getMax() {
		if(isEmpty()) {
            return Integer.MIN_VALUE;
        }
        return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
        int childIndex = heap.size()-1;
        int parentIndex = (childIndex-1)/2;
        
        while(childIndex > 0) {
            if(heap.get(childIndex) > heap.get(parentIndex)) {
                int temp1 = heap.get(childIndex);
                heap.set(childIndex, heap.get(parentIndex));
                heap.set(parentIndex, temp1);
                childIndex = parentIndex;
                parentIndex = (childIndex - 1)/2;
            }
            else{
                return;
            }
        }
	}

	int removeMax() {
		if(isEmpty()) {
            return Integer.MIN_VALUE;
        }
        
        int temp2 = heap.get(0);
        heap.set(0, heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        
        int index = 0;
        int parent = index;
        
        int leftChildren = 2 * index + 1;
        int rightChildren = 2 * index + 2;
        
        while(leftChildren < heap.size()) {
            
            if(heap.get(leftChildren) > heap.get(parent)) {
                parent = leftChildren;
            }
            if(rightChildren < heap.size() && heap.get(rightChildren) > heap.get(parent)) {
                parent = rightChildren;
            }
            if(parent == index) {
                break;
            }else {
                int temp3 = heap.get(parent);
                heap.set(parent, heap.get(index));
                heap.set(index, temp3);
                index = parent;
                leftChildren = 2 * index + 1;
                rightChildren = 2 * index + 2;
            }
            
        }
        return temp2;
  
	}
}
